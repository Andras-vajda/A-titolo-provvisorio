cmake_minimum_required(VERSION 3.10)
project(Frobenius VERSION 1.2.0)

# Imposta C standard
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)

# Opzioni di ottimizzazione per Visual Studio
if(MSVC)
    add_compile_options(/W4 /O2)
    # Disabilita warnings su funzioni sicure
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
else()
    message(WARNING "Questo progetto è ottimizzato per Visual Studio su Windows")
endif()

# Directory per includere LibTomMath
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)

# Directory per output
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Trova le librerie LibTomMath
set(LIBTOMMATH_LIB_DIR "${CMAKE_CURRENT_SOURCE_DIR}/lib")
if(MSVC)
    set(LIBTOMMATH_LIB "${LIBTOMMATH_LIB_DIR}/tommath.lib")
else()
    set(LIBTOMMATH_LIB "${LIBTOMMATH_LIB_DIR}/libtommath.lib")
endif()

# Verifica che LibTomMath sia disponibile
if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/include/tommath.h")
    message(FATAL_ERROR 
        "File tommath.h non trovato in ${CMAKE_CURRENT_SOURCE_DIR}/include.\n"
        "Scaricare LibTomMath da https://github.com/libtom/libtommath\n"
        "e posizionare i file header nella cartella 'include'\n"
        "e le librerie nella cartella 'lib'.")
endif()

if(NOT EXISTS "${LIBTOMMATH_LIB}")
    message(FATAL_ERROR 
        "Libreria tommath non trovata in ${LIBTOMMATH_LIB_DIR}.\n"
        "Compilare la libreria per Visual Studio e metterla nella cartella 'lib'.")
endif()

# Aggiunta dell'eseguibile C
add_executable(frobenius_ltm Frobenius_ltm.c)
target_link_libraries(frobenius_ltm ${LIBTOMMATH_LIB})

# Messaggio informativo sul codice Python (non compilato)
message(STATUS "Nota: La versione Python (Frobenius_solver.py) non richiede compilazione.")
message(STATUS "Per eseguirla, utilizzare: python Frobenius_solver.py")

# Messaggio informativo sul codice Rust (gestito separatamente con Cargo)
message(STATUS "Nota: Per compilare la versione Rust, utilizzare Cargo:")
message(STATUS "cargo build --release")