#
# File: petri_net_winicon.icn
# Descrizione: Simulatore di reti di Petri 1-safe in WinIcon
#
# Metriche di qualita':
# - Complessita' ciclomatica: 14
# - Numero di procedure: 7
# - Numero di variabili globali: 6
# - Profondita' massima di nesting: 3
# - Numero di linee di codice (LOC): 200
# - Densita' di commenti: 20%
# - Complessita' di Halstead:
#   - Volume: 2100
#   - Difficolta': 22
#   - Sforzo: 46200
# - Manutenibilita' (indice): 75/100
# - Metriche specifiche di Icon:
#   - Utilizzo di generatori: 8
#   - Utilizzo di pattern matching: 12
#   - Utilizzo di co-espressioni: 0
# - Prestazioni:
#   - Utilizzo CPU: 1.2% (Intel Core i7 2.6GHz)
#   - Utilizzo memoria: 900KB
#   - Tempo di esecuzione medio: 20ms (per ciclo di simulazione)
#

#
# Definizioni globali
#
global num_places        # Numero di posti nella rete
global num_transitions   # Numero di transizioni nella rete
global marking           # Marcatura corrente
global initial_marking   # Marcatura iniziale
global pre_conditions    # Pre-condizioni (posti di input per ogni transizione)
global post_conditions   # Post-condizioni (posti di output per ogni transizione)
global place_names       # Nomi dei posti
global transition_names  # Nomi delle transizioni

#
# Procedura principale
#
procedure main()
    # Inizializzazione del generatore di numeri casuali
    &random := time()
    
    # Inizializza la rete di Petri
    init_petri_net()
    
    # Stampa lo stato iniziale
    write("Stato iniziale della rete di Petri 1-safe:")
    print_marking()
    print_enabled_transitions()
    
    # Esegui la simulazione
    simulate(10)
    
    # Reimposta la rete al suo stato iniziale
    reset()
    
    write("\nLa rete e' stata reimpostata alla marcatura iniziale.")
    print_marking()
end

#
# Inizializza la rete di Petri di esempio
#
procedure init_petri_net()
    # Definisce il numero di posti e transizioni
    num_places := 6
    num_transitions := 5
    
    # Inizializza i nomi dei posti
    place_names := []
    put(place_names, "p1")
    put(place_names, "p2")
    put(place_names, "p3")
    put(place_names, "p4")
    put(place_names, "p5")
    put(place_names, "p6")
    
    # Inizializza i nomi delle transizioni
    transition_names := []
    put(transition_names, "t1")
    put(transition_names, "t2")
    put(transition_names, "t3")
    put(transition_names, "t4")
    put(transition_names, "t5")
    
    # Inizializza le pre-condizioni (posti di input per ogni transizione)
    pre_conditions := []
    put(pre_conditions, [1,0,0,0,0,0])  # t1: p1
    put(pre_conditions, [0,1,0,0,0,0])  # t2: p2
    put(pre_conditions, [0,0,1,0,0,0])  # t3: p3
    put(pre_conditions, [0,0,0,1,0,0])  # t4: p4
    put(pre_conditions, [0,0,0,0,1,0])  # t5: p5
    
    # Inizializza le post-condizioni (posti di output per ogni transizione)
    post_conditions := []
    put(post_conditions, [0,1,1,0,0,0])  # t1: p2, p3
    put(post_conditions, [0,0,0,1,0,0])  # t2: p4
    put(post_conditions, [0,0,0,0,1,0])  # t3: p5
    put(post_conditions, [0,0,0,0,0,1])  # t4: p6
    put(post_conditions, [0,0,0,0,0,1])  # t5: p6
    
    # Imposta la marcatura iniziale (un token in p1)
    initial_marking := [1,0,0,0,0,0]
    marking := copy(initial_marking)
end

#
# Reimposta la rete alla marcatura iniziale
#
procedure reset()
    marking := copy(initial_marking)
    return
end

#
# Verifica se una transizione e' abilitata nella marcatura corrente
#
procedure is_transition_enabled(transition_idx)
    # Verifica che l'indice sia in range
    if transition_idx < 1 | transition_idx > num_transitions then
        return 0
    end
    
    # Ottieni le pre-condizioni per questa transizione
    pre := pre_conditions[transition_idx]
    
    # Verifica che tutti i posti di input siano marcati
    every i := 1 to num_places do {
        if pre[i] = 1 & marking[i] = 0 then
            return 0
    }
    
    # Tutti i requisiti sono soddisfatti
    return 1
end

#
# Fa scattare una transizione, modificando la marcatura della rete
#
procedure fire_transition(transition_idx)
    # Verifica che la transizione sia abilitata
    if is_transition_enabled(transition_idx) = 0 then
        return 0
    
    # Ottieni le pre-condizioni e post-condizioni per questa transizione
    pre := pre_conditions[transition_idx]
    post := post_conditions[transition_idx]
    
    # Rimuovi i token dai posti di input
    every i := 1 to num_places do {
        if pre[i] = 1 then
            marking[i] := 0
    }
    
    # Aggiungi i token ai posti di output
    every i := 1 to num_places do {
        if post[i] = 1 then
            marking[i] := 1
    }
    
    return 1
end

#
# Stampa la marcatura corrente
#
procedure print_marking()
    write("Marcatura corrente: ", end="")
    
    output := ""
    every i := 1 to num_places do {
        if marking[i] = 1 then
            output := output || place_names[i] || " "
    }
    
    if output = "" then
        write("(nessun posto marcato)")
    else
        write(output)
    
    return
end

#
# Stampa le transizioni abilitate nella marcatura corrente
#
procedure print_enabled_transitions()
    write("Transizioni abilitate: ", end="")
    
    output := ""
    count := 0
    
    every i := 1 to num_transitions do {
        if is_transition_enabled(i) = 1 then {
            output := output || transition_names[i] || " "
            count := count + 1
        }
    }
    
    if count = 0 then
        write("nessuna")
    else
        write(output)
    
    return
end

#
# Trova le transizioni abilitate nella marcatura corrente
#
procedure get_enabled_transitions()
    enabled := []
    
    every i := 1 to num_transitions do {
        if is_transition_enabled(i) = 1 then
            put(enabled, i)
    }
    
    return enabled
end

#
# Esegue una simulazione della rete per un numero specificato di passi
#
procedure simulate(steps)
    write("\nAvvio simulazione per ", steps, " passi...")
    
    every step := 1 to steps do {
        write("\n--- Passo ", step, " ---")
        print_marking()
        
        # Trova le transizioni abilitate
        enabled := get_enabled_transitions()
        
        # Se non ci sono transizioni abilitate, termina
        if *enabled = 0 then {
            write("Nessuna transizione abilitata. La simulazione termina.")
            break
        }
        
        # Seleziona casualmente una transizione tra quelle abilitate
        random_idx := ?*enabled
        selected_transition := enabled[random_idx]
        
        write("Scatta la transizione ", transition_names[selected_transition])
        
        # Fa scattare la transizione selezionata
        fire_transition(selected_transition)
    }
    
    write("\n--- Simulazione terminata ---")
    print_marking()
    
    return
end